package metadata

import (
	"fmt"
	"sync"
)

// Template template info struct
type Template struct {
	Name    string
	Content string
}

var tplMap sync.Map

func LoadTpl(key string) (*Template, bool) {
	val, ok := tplMap.Load(key)
	if ok {
		return val.(*Template), ok
	}
	return nil, ok
}

func StoreTpl(key, content string) {
	_, ok := tplMap.Load(key)
	if ok {
		panic(fmt.Errorf("template[%s] is already exist", key))
	}
	tpl := &Template{Name: key, Content: content}
	tplMap.Store(key, tpl)
}

const NotEditMark = `
// Code generated by jasonlabz/gentol. DO NOT EDIT.
// Code generated by jasonlabz/gentol. DO NOT EDIT.
// Code generated by jasonlabz/gentol. DO NOT EDIT.

`
const EditMark = `
// Code generated by jasonlabz/gentol. You may edit it.

`

type IBaseData interface {
	GenRenderData() map[string]any
}

type MetaType struct {
	GoType             string
	SQLNullableType    string
	GureguNullableType string
	ValueFormat        string
}

type BaseConfig struct {
	DBType                string
	SchemaName            string
	TableName             string
	DSN                   string
	OnlyModel             bool
	ServicePath           string
	ModelPath             string
	DaoPath               string
	JsonFormat            string
	XMLFormat             string
	ProtobufFormat        string
	RunGoFmt              bool
	UseSQLNullable        bool
	AddGormAnnotation     bool
	AddProtobufAnnotation bool
}

var abbreviationMap = map[string]bool{
	"API":   true,
	"ASCII": true,
	"CPU":   true,
	"CSS":   true,
	"DNS":   true,
	"EOF":   true,
	"GUID":  true,
	"HTML":  true,
	"HTTP":  true,
	"HTTPS": true,
	"ID":    true,
	"IP":    true,
	"JSON":  true,
	"LHS":   true,
	"QPS":   true,
	"RAM":   true,
	"RHS":   true,
	"RPC":   true,
	"SLA":   true,
	"SMTP":  true,
	"SSH":   true,
	"TLS":   true,
	"TTL":   true,
	"UI":    true,
	"UID":   true,
	"UUID":  true,
	"URI":   true,
	"URL":   true,
	"UTF8":  true,
	"VM":    true,
	"XML":   true,
	"ACL":   true,
}

func init() {
	StoreTpl("model", Model)
	StoreTpl("model_base", ModelBase)
	StoreTpl("model_hook", ModelHook)
	StoreTpl("dao", Dao)
	StoreTpl("dao_impl", DaoImpl)
	StoreTpl("database", Database)
	StoreTpl("bootstrap", Bootstrap)
	StoreTpl("main", Main)
	StoreTpl("router", Router)
	StoreTpl("loggerMiddleware", LoggerMiddleware)
	StoreTpl("contextMiddleware", ContextMiddleware)
	StoreTpl("service", Service)
	StoreTpl("serviceImpl", ServiceImpl)
	StoreTpl("controller", Controller)
	StoreTpl("reqDTO", ReqDTO)
	StoreTpl("resDto", ResDto)
	StoreTpl("ginx", Ginx)
	StoreTpl("page", Page)
	StoreTpl("constant", Constant)
	StoreTpl("readme", Readme)
	StoreTpl("docs", Docs)
	StoreTpl("helper", Helper)
	StoreTpl("gomod", GOMOD)
	StoreTpl("conf", Conf)
}
